@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Candidatos";
}
@model Position
<!-- Cargar un script personalizado -->

<ol class="breadcrumb mb-4 mt-4">
    <li class="breadcrumb-item"><a href="index.html" style="color: #20c997;">Gestión</a></li>
    <li class="breadcrumb-item active">Candidatos</li>
</ol>

<form id="formCandidato" onsubmit="return Guardar()">
    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <input type="text" class="form-control required rounded-3" id="identification" name="identification" autocomplete="off" placeholder="Identificación" maxlength="11" required>
                <label for="identification" class="text-muted">Identificación (Cédula de 11 dígitos)</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <input type="text" class="form-control required rounded-3" id="name" name="name" autocomplete="off" placeholder="Nombre completo" required>
                <label for="name" class="text-muted">Nombre completo</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <input disabled type="text" class="form-control required rounded-3" id="desiredPosition" name="desiredPosition_disabled" autocomplete="off" value="@Model.Name" placeholder="Posición deseada" required>
                <label for="desiredPosition" class="text-muted">Posición deseada</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <input type="text" class="form-control required rounded-3" id="department" name="department" autocomplete="off" placeholder="Departamento" required>
                <label for="department" class="text-muted">Departamento</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <input type="number" class="form-control required rounded-3" id="desiredSalary" name="desiredSalary" autocomplete="off" placeholder="Salario deseado" step="0.01" required>
                <label for="desiredSalary" class="text-muted">Salario deseado</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <textarea class="form-control required rounded-3" id="keyCompetencies" name="keyCompetencies" placeholder="Competencias clave" style="height: 100px" required></textarea>
                <label for="keyCompetencies" class="text-muted">Competencias clave</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <textarea class="form-control required rounded-3" id="keyTrainings" name="keyTrainings" placeholder="Capacitaciones clave" style="height: 100px" required></textarea>
                <label for="keyTrainings" class="text-muted">Capacitaciones clave</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <textarea class="form-control required rounded-3" id="workExperience" name="workExperience" placeholder="Experiencia laboral" style="height: 100px" required></textarea>
                <label for="workExperience" class="text-muted">Experiencia laboral</label>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-sm-12">
            <div class="form-floating">
                <input type="text" class="form-control rounded-3" id="recommendedBy" name="recommendedBy" autocomplete="off" placeholder="Recomendado por (opcional)">
                <label for="recommendedBy" class="text-muted">Recomendado por (opcional)</label>
            </div>
        </div>
    </div>

    <!-- Botón de envío -->
    <div class="row mb-4">
        <div class="col-sm-12 text-end">
            <button type="submit" class="btn btn-success btn-lg">Enviar</button>
        </div>
    </div>
</form>

<!-- Validación de formulario y guardar usando AJAX -->
<script>
    function Guardar() {
        // Primero validamos los campos del formulario
        if (!validarFormulario()) {
            return false; // Si la validación falla, no se ejecuta el código de guardado
        }

        // Crear un campo oculto con el valor de desiredPosition
        var desiredPositionValue = $("#desiredPosition").val();
        $("<input />").attr("type", "hidden")
            .attr("name", "desiredPosition")
            .attr("value", desiredPositionValue)
            .appendTo("#formCandidato");

        var formData = $("#formCandidato").serialize(); // Serializamos los datos del formulario

        jQuery.ajax({
            url: "/Candidatos/Guardar",  // URL que apunta al método en tu controlador
            type: "POST",
            data: formData, // Enviamos los datos serializados
            success: function (data) {
                if (data.resultado) {
                    // Mostrar SweetAlert2 de éxito
                    Swal.fire({
                        icon: 'success',
                        title: 'Guardado!',
                        text: 'El candidato se ha guardado exitosamente.',
                        confirmButtonText: 'Aceptar'
                    }).then(() => {
                        window.location.href = "/Home/Index"; // Redirigir a la lista de candidatos
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'No se pudo guardar el candidato.',
                        confirmButtonText: 'Aceptar'
                    });
                }
            },
            error: function (error) {
                console.log(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Hubo un problema al enviar la solicitud.',
                    confirmButtonText: 'Aceptar'
                });
            }
        });

        return false; // Prevenir que el formulario realice un submit tradicional
    }

    // Función de validación personalizada
    function validarFormulario() {
        var isValid = true;

        // Validar Identificación (Cédula Dominicana de 11 dígitos)
        var identificacion = $("#identification").val().trim();
        if (identificacion === "" || !validarCedulaDominicana(identificacion)) {
            Swal.fire({
                icon: 'warning',
                title: 'Advertencia!',
                text: 'Por favor, ingrese una cédula válida de 11 dígitos.',
                confirmButtonText: 'Aceptar'
            });
            isValid = false;
        }

        // Validar el resto de los campos
        if ($("#name").val().trim() === "" || $("#department").val().trim() === "" || $("#desiredSalary").val().trim() === "" || $("#keyCompetencies").val().trim() === "" || $("#keyTrainings").val().trim() === "" || $("#workExperience").val().trim() === "") {
            Swal.fire({
                icon: 'warning',
                title: 'Advertencia!',
                text: 'Por favor, complete todos los campos obligatorios.',
                confirmButtonText: 'Aceptar'
            });
            isValid = false;
        }

        return isValid;
    }

    // Función para validar la cédula dominicana (11 dígitos)
    function validarCedulaDominicana(cedula) {
        // Eliminar espacios en blanco
        cedula = cedula.replace(/\s+/g, '');

        // Verificar que la cédula tenga exactamente 11 dígitos
        if (cedula.length !== 11 || !/^\d+$/.test(cedula)) {
            return false;
        }

        // Coeficientes para la validación
        const multiplicadores = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];

        // Cálculo de la suma de productos
        let suma = 0;
        for (let i = 0; i < 10; i++) {
            let producto = parseInt(cedula.charAt(i)) * multiplicadores[i];
            // Si el producto es mayor que 9, sumamos los dígitos del resultado
            suma += producto > 9 ? Math.floor(producto / 10) + (producto % 10) : producto;
        }

        // Obtener el dígito verificador
        const digitoVerificador = (10 - (suma % 10)) % 10;

        // Comparar el dígito verificador con el último dígito de la cédula
        return digitoVerificador === parseInt(cedula.charAt(10));
    }
</script>
